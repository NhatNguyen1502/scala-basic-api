version = "3.9.8"  // The Scalafmt version used for formatting

runner.dialect = scala213  // Set the Scala dialect (use scala3 for Scala 3 projects)

align = none  // Disable alignment of tokens like '=', '=>' to keep code simple and clean

align.openParenCallSite = false  // Do not align open parentheses at the call site

newlines.beforeCurlyLambdaParams = true  // Add newline before lambda parameters starting with '{'

newlines.avoidInResultType = false  // Allow newlines in function return types for readability

danglingParentheses.callSite = true  // Put method call parentheses on a new line when breaking

maxColumn = 80  // Maximum allowed line width; long lines will be wrapped

docstrings.style = Asterisk  // Use asterisk-style ScalaDoc (i.e., `/** ... */` with `*` prefixes)

indent.main = 2  // Indentation size for top-level definitions (classes, objects, etc.)

indent.callSite = 2  // Indentation size for function/method calls and arguments

spaces {
  inImportCurlyBraces = false  // No spaces inside import curly braces, e.g., `import foo.{bar,baz}`
  inParentheses = false  // No extra spaces inside parentheses, e.g., `def f(x: Int)`
  afterKeywordBeforeParen = true  // Add space between keywords and parentheses, e.g., `if (x > 0)`
  beforeContextBoundColon = true  // Add space before the `:` in context bounds, e.g., `T : Ordering`
}

continuationIndent {
  callSite = 2  // Indentation for method arguments split across lines
  defnSite = 2  // Indentation for parameters/definitions split across lines
}

binPack {
  literalArgumentLists = false  // Do not pack multiple literal arguments on one line
  parentConstructors = false  // Do not pack parent constructors into a single line
}

optIn {
  configStyleArguments = true  // Opt in to config-style formatting for arguments
}

project.git = true  // Enable Git integration for respecting `.gitignore` and detecting changed files
